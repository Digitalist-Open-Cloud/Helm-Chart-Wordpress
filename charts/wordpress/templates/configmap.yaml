---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "wordpress.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "wordpress.labels" . | nindent 4 }}
data:
  env-wp-config-extra: |
    {{ .Values.wordpress.config_extra | nindent 4 }}
  php-fpm-zz-docker.conf: |-
    [global]
    daemonize = no

    [www]
    listen = 9000
    listen.allowed_clients = ::1,127.0.0.1,10.42.0.1
    ;listen.allowed_clients 127.0.0.1,10.42.0.0/16
    ;listen = /run/php/fpm.sock

  php-opcache-recommended.ini: |-
    ; Enables the opcode cache. When disabled, code is not optimised or cached.
    ; default = 1
    opcache.enable=1

    ; The size of the shared memory storage used by OPcache, in megabytes.
    ; default = 128
    opcache.memory_consumption=128

    ; The amount of memory for interned strings in Mbytes.
    ; default = 8
    opcache.interned_strings_buffer=8

    ; The maximum number of keys (scripts) in the OPcache hash table.
    ; Only numbers between 200 and 100000 are allowed.
    ; default = 10000
    opcache.max_accelerated_files=10000

    ; Setting this directive to 1 will make PHP check the timestamps of
    ; each file to see if it has been modified and if so it will update
    ; the cache for that file. When set to 0 it will not update each files
    ; cache and you will need to restart PHP each time you modify a file.
    ; default = 1
    opcache.validate_timestamps=1

    ; How often (in seconds) to check file timestamps for changes to the
    ; shared memory storage allocation.
    ; default = 2
    opcache.revalidate_freq=60


  php-uploads.ini: |-
    ; This sets the maximum amount of memory in bytes that a script is allowed to allocate.
    memory_limit = 256M

    ; The maximum number of files allowed to be uploaded simultaneously.
    max_file_uploads = 50

    ; The maximum size of an uploaded file
    upload_max_filesize = 96M

    ; Sets max size of post data allowed. This setting also affects file upload.
    ; To upload large files, this value must be larger than upload_max_filesize.
    ; Generally speaking, memory_limit should be larger than post_max_size.
    post_max_size = 96M

    ; This sets the maximum time in seconds a script is allowed to run before it is terminated by the parser.
    max_execution_time = 300

    ; This sets the maximum time in seconds a script is allowed to parse input data, like POST and GET.
    ; Timing begins at the moment PHP is invoked at the server and ends when execution begins. The default
    ; setting is -1, which means that max_execution_time is used instead.
    max_input_time = 600


  nginx.conf: |-
      worker_processes            auto;

      error_log                   /dev/stderr;
      pid                         /tmp/nginx.pid;
      worker_rlimit_nofile        8192;

      events {
        worker_connections        1024;
        multi_accept              on;
      }

      http {
        # cache informations about FDs, frequently accessed files
        # can boost performance, but you need to test those values
        open_file_cache           max=40000 inactive=20s;
        open_file_cache_valid     60s;
        open_file_cache_min_uses  2;
        open_file_cache_errors    on;

        # copies data between one FD and other from within the kernel
        # faster than read() + write()
        sendfile                  on;

        # send headers in one piece, it is better than sending them one by one
        tcp_nopush                on;

        # don't buffer data sent, good for small data bursts in real time
        tcp_nodelay on;

        # gzip settings
        gzip                      on;
        gzip_buffers              16 8k;
        gzip_min_length           10k;
        gzip_proxied              any;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            text/x-component
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            application/atom+xml
            font/truetype
            font/opentype
            application/vnd.ms-fontobject
            image/svg+xml;

        # allow the server to close connection on non responding client, this will free up memory
        reset_timedout_connection on;

        # request timed out -- default 60
        client_body_timeout       20;

        # if client stop responding, free up memory -- default 60
        send_timeout              10;

        # server will close connection after this time -- default 75
        keepalive_timeout         30;

        # number of requests client can make over keep-alive -- for testing environment
        keepalive_requests        10000;

        # other settings
        client_max_body_size      96M;
        server_tokens             off;

        include                   mime.types;
        default_type              application/octet-stream;
        add_header                X-Frame-Options SAMEORIGIN;

        # trust these ips to set the correct http_x_forwarded_for header
        set_real_ip_from          10.0.0.0/8;
        set_real_ip_from          127.0.0.1;
        real_ip_header            X-Forwarded-For;

        log_format                main '$remote_addr - $status [$request] $body_bytes_sent '
                                     '"$http_referer" "$http_user_agent" via $realip_remote_addr';
        access_log                "/dev/stdout" main buffer=2048 flush=5s;

        client_body_temp_path     /tmp/client_temp 1 2;
        proxy_temp_path           /tmp/proxy_temp_path 1 2;
        fastcgi_temp_path         /tmp/fastcgi_temp 1 2;
        uwsgi_temp_path           /tmp/uwsgi_temp 1 2;
        scgi_temp_path            /tmp/scgi_temp 1 2;

        server {
            listen [::]:8080 default_server;
            listen 8080 default_server;

            server_name _;
            root /var/www/html/web;
            index index.php;

            gzip on;
            gzip_proxied any;
            gzip_comp_level 4;
            gzip_types text/css application/javascript image/svg+xml;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Serve static files, removing hashes in filenames for wp-includes and wp-admin
            location ~* ^/wp/(wp-includes|wp-admin|wp-content)/.*\.(css|js)$ {
                root /var/www/html/web;

                # First try to locate the file as-is or fallback to removing the hash
                try_files $uri @strip_hash;

                expires max;
                log_not_found off;
                access_log off;
            }

            location ~* ^/app/(plugins|themes)/.*\.(css|js)$ {
                root /var/www/html/web;

                # First try to locate the file as-is or fallback to removing the hash
                try_files $uri @strip_hash;

                expires max;
                log_not_found off;
                access_log off;
            }

            # Fallback: Remove hash and look for non-hashed file
            location @strip_hash {
                # Rewrite to remove hash (e.g., .MS4w) and retry original path
                rewrite "^(/.+)\.[A-Za-z0-9]+(\.css|\.js)$" "$1$2" last;

                # Retry with a stripped hash or return 404 if the rewritten file could not be found
                try_files $uri =404;
            }

            # General WordPress routing: Core rewrite rules
            location / {
                try_files $uri $uri/ /index.php?$args;
            }

            # PHP handling for WordPress
            location ~ \.php$ {
                fastcgi_split_path_info ^(.+\.php)(/.+)$;

                if (!-f $document_root$fastcgi_script_name) {
                    return 404;
                }

                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;

                fastcgi_pass 127.0.0.1:9000;
                fastcgi_hide_header X-Powered-By;
            }

            # Cache long-lived assets
            location ~* \.(css|js|ico|gif|jpe?g|png|svg|webp|woff|woff2|ttf|eot|pdf)$ {
                expires 120d;
                log_not_found off;
                access_log off;
            }
        }
      }